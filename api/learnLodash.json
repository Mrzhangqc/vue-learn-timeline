{
  "code": 200, 
  "result" : {
    "data" : [{
      "name" : "compact(array)",
	  "href" : "http://lodash.net/docs/4.16.1.html#_compactarray",
      "description": "创建一个新数组，包含原数组中所有的非假值元素",
      "example": "_.compact([0, 1, false, 2, '', 3]);\r\n\/\/ => [1, 2, 3]"
    },{
      "name" : "flattenDeep(array)",
	  "href" : "http://lodash.net/docs/4.16.1.html#_flattendeeparray",
      "description": "将array递归为一维数组。",
      "example": "_.flattenDeep([1, [2, [3, [4]], 5]]);\n\/\/ => [1, 2, 3, 4, 5]"
    },{
      "name" : "fromPairs(pairs)",
	  "href" : "http://lodash.net/docs/4.16.1.html#_frompairspairs",
      "description": "这个方法返回一个由键值对pairs构成的对象。",
      "example": "_.fromPairs([['fred', 30], ['barney', 40]]);\n\/\/ => { 'fred': 30, 'barney': 40 }"
    },{
      "name" : "head/first(array)",
	  "href" : "http://lodash.net/docs/4.16.1.html#_headarray",
      "description": "获取数组 array 的第一个元素。",
      "example": "_.head([1, 2, 3]);\n\/\/ => 1 \n\r _.head([]);\n\/\/ => undefined"
    },{
      "name" : "last(array)",
	  "href" : "http://lodash.net/docs/4.16.1.html#_lastarray",
      "description": "获取数组 array 的最后一个元素。",
      "example": "_.last([1, 2, 3]);\n\/\/ => 3 "
    },{
      "name" : "unionBy([arrays], [iteratee=_.identity])",
	  "href" : "http://lodash.net/docs/4.16.1.html#_uniqbyarray-iteratee_identity",
      "description": "调用每一个数组（array）的每个元素以产生唯一性计算的标准",
      "example": "_.uniqBy([2.1, 1.2, 2.3], Math.floor);\n\/\/ => [2.1, 1.2] \n\r \/\/ The `_.property` iteratee shorthand.\n_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n\/\/ => [{ 'x': 1 }, { 'x': 2 }]"
    },{
      "name" : "groupBy(collection, [iteratee=_.identity])",
	  "href" : "http://lodash.net/docs/4.16.1.html#_groupbycollection-iteratee_identity",
      "description": "创建一个对象，key 是 iteratee 遍历 collection(集合) 中的每个元素返回的结果。",
      "example": "_.groupBy([6.1, 4.2, 6.3], Math.floor);\n\/\/ => { '4': [4.2], '6': [6.1, 6.3] } \n\/\//The `_.property` iteratee shorthand.\n\r_.groupBy(['one', 'two', 'three'], 'length');\n\/\/ => { '3': ['one', 'two'], '5': ['three'] }"
    },{
      "name" : "debounce(func, [wait=0], [options={}])",
	  "href" : "http://lodash.net/docs/4.16.1.html#_debouncefunc-wait0-options",
      "description": "创建一个 debounced（防抖动）函数，该函数会从上一次被调用后，延迟 wait 毫秒后调用 func 方法。",
      "example": "\/\/ 避免窗口在变动时出现昂贵的计算开销。\njQuery(window).on('resize', _.debounce(calculateLayout, 150));"
    },{
      "name" : "throttle(func, [wait=0], [options={}])",
	  "href" : "http://lodash.net/docs/4.16.1.html#_throttlefunc-wait0-options",
      "description": "创建一个节流函数，在 wait 秒内最多执行 func 一次的函数。 该函数提供一个 cancel 方法取消延迟的函数调用以及 flush 方法立即调用。",
      "example": "\/\/ 避免在滚动时过分的更新定位。\njQuery(window).on('scroll', _.throttle(updatePosition, 100));"
    }]
  }
}

